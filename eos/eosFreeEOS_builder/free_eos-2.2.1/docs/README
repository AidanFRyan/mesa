Table of Contents:

1. Introduction
2. lapack and blas Installation Prerequisites
3. CMake Installation Prerequisite
4. Build and Install FreeEOS
5. Instructions for all users of FreeEOS
6. Conclusions

1. Introduction

This EOS code is suitable for stellar interior and vibrational frequency
calculations, and is fast enough to be called directly from those
calculations which eliminates the errors associated with interpolating
tables.  The code produces smooth first- and second-order thermodynamic
functions.  It has option suites to mimic a number of different equations of
state.  Also it has the option suite for EOS1, which is our recommended EOS
which fits the OPAL EOS results quite well for the solar case. EOS1a, EOS2,
EOS3, and EOS4 are approximations to EOS1 which are of increasing speed, and
decreasing quality.  However, we find under all circumstances that we have
tested (including extreme LMS models where these option suites yield large
differences in results in the envelope) that the radius and luminosity
results are insensitive to differences between these option suites.  If you
require more detailed data than radius and luminosity (e.g., vibrational
frequencies) than EOS1 is the preferred EOS.

2. lapack and blas Installation Prerequisites

FreeEOS requires that you have the lapack and blas libraries installed
somewhere on your system.  These are common library packages so with any
luck you will have them installed on your system already as a matter of
course.  For rpm-based Linux distributions try "rpm -qi lapack" and "rpm -qi
blas" and for Debian-based Linux systems use "dpkg --list |grep lapack" and
"dpkg --list grep blas" to find whether these packages are already
installed. For Unix systems consult with your system administrator and/or
use the "find" command to look for liblapack* and libblas* on your system.  

If you do not have these packages installed on Debian-based systems, then
simply issue "apt-get install lapack-dev blas-dev" to install.  (Installing
these development packages will automatically also install other required
packages.) On rpm-based systems with an apt-get front-end, use "apt-get
install lapack blas" to install.  (The development versions of lapack and
blas are lumped in with ordinary lapack and blas on most rpm-based systems.)
On rpm-based Linux systems without an apt-get front-end, search the web for
appropriate rpm's for your particular version of Linux. For example, enter
lapack or blas in the search box at http://rpm.pbone.net/ to find rpms for
lapack and blas for a wide variety of Linux distribution versions.  Make
sure you download and install _only_ the rpms that are appropriate for your
Linux distribution version.

For Unix (and also Linux systems if you cannot find good rpms for lapack and
blas), follow the lapack and blas download and build instructions at
http://www.netlib.org/lapack/lawn81/index.html.

In particular "File Format" tells you where to download the tarball, and
"Installing LAPACK on a Unix System" tells you how to set up the
all-important make.inc file that guides the build.  Note that a variety of
make.inc example files have been included in the tarball for several
flavours of Unix/Linux so usually you can just copy the one that is
appropriate for your system.

***AIX (4.3.3) lapack quirks: (I thank Santi Cassisi for giving me access to
his AIX system to help figure out these quirks).

* Use the make.inc.RS6K version
cd LAPACK
cp INSTALL/make.inc.RS6K make.inc

* change ETIME ==> ETIME_ following the directions at
http://www.netlib.org/lapack/lawn41/node119.html

* Don't bother with the extensive testing that the "make" command gives you.
It inevitably fails (probably because a non-standard libessl version of BLAS
is being used).  Instead, for LAPACK testing, rely on my EOS test done with
./free_eos_test below.  So assuming you are in the LAPACK directory instead
of using

make

use

make install lib

(which skips all the blas and lapack tests) instead. That last command
creates a library called lapack_RS6K.a which is rather awkward for my build
routine (which assume library names of the form lib*) to deal with.  To get
around that simply make a symlink.

ln -s lapack_RS6K.a liblapack.a

***Solaris (uname -a ==> SunOS sparc-solaris1 5.9 Generic_112233-03 sun4u
sparc SUNW,Ultra-60) lapack quirks:  (I thank Sourceforge for providing
a Solaris compile farm system where I could figure out these quirks).

On solaris the location of the fortran compiler and its associated loader
are not obvious.  What you
have to do is put the correct directories first on your path.

PATH="/opt/SUNWspro/bin:/usr/ccs/bin:"$PATH"

cd LAPACK
cp INSTALL/make.inc.SUN4SOL2 make.inc

On the solaris system accessible to me I could not find sunperf (although it
may be there) so I chose to use

BLASLIB      = ../../blas$(PLAT).a

to replace 

BLASLIB     = -xlic_lib=sunperf

in this file.  Also, I replaced f77 by f95 since that is what will be used
to compile FreeEOS below for the solaris case.
FORTRAN  = f95
LOADER   = f95

Furthermore, I adjusted Makefile to build the blas library from scratch.

lib: blaslib lapacklib tmglib

To save testing time I ran

make install lib

The result was the following libraries:

ls -l *.a
blas_SUN4SOL2.a    lapack_SUN4SOL2.a  tmglib_SUN4SOL2.a

Finally, I symlinked the more standard names to these libraries so that
my FreeEOS build procedure would recognize them.

ln -s blas_SUN4SOL2.a libblas.a
ln -s lapack_SUN4SOL2.a liblapack.a

***Mac OS X 10.3 (uname -a ==> Darwin Bill-Paxtons-Computer.local 7.5.0
Darwin Kernel Version 7.5.0: Thu Aug 5 19:26:16 PDT 2004;
root:xnu/xnu-517.7.21.obj~3/RELEASE_PPC Power Macintosh powerpc) with fink
lapack quirks:  (I thank Bill Paxton for running Mac OS X 10.3 build
tests for me.  I also have a terse report from Aaron Dotter that all
10.3 instructions work fine on Mac OS X 10.4)

Bill reports it is impossible to link to the lapack/blas libraries 
installed by the fink atlas package. Typical errors are undefined symbols
for restFP saveFP, and if you look those up on google, that appears to be
some inconsistency between the g77 version used to build older fink packages
and the modern g77 available on fink.  This problem may eventually be solved
by a new build of atlas so it is worth continuing to try the fink atlas
package, but for now we fall back to building lapack/blas from scratch.

Here is how to build lapack/blas from scratch on Mac OS X 10.3 (and 10.4)

unpack the lapack.tgz tarball (see "file format" above to find how to get
that tarball.
cd LAPACK
cp INSTALL/make.inc.LINUX make.inc
edit make.inc and change the following line:
OPTS     = -funroll-all-loops -fno-f2c -O3
OPTS     = -funroll-all-loops -O3

The -fno-f2c g77 option has to be applied consistently for all software, and
since we don't use that option for FreeEOS, we don't use it for lapack and
blas as well.

Yes, that is right.  Aside from the change to OPTS we tried the vanilla
Linux version of make.inc, and it works fine on the above Mac OS X 10.3 (and
10.4) system with g77.

Furthermore, I adjusted Makefile to build the blas library from scratch.

lib: blaslib lapacklib tmglib

To save testing time I ran

make install lib

The result was the following libraries:

ls -l *.a
blas_LINUX.a    lapack_LINUX.a  tmglib_LINUX.a

Finally, I symlinked the more standard names to these libraries so that
my FreeEOS build procedure would recognize them.

ln -s blas_LINUX.a libblas.a
ln -s lapack_LINUX.a liblapack.a

***Debian testing with g77 (I tried this as an experiment because I was having
trouble with the lapack/atlas Debian testing version compiled with gfortran)
Note, these directions are slightly different from the above because the
latest version of lapack (3.1.1) is arranged slightly differently than
before.

unpack the lapack.tgz tarball (see "file format" above to find how to get
that tarball)

cd lapack-3.1.1
cp INSTALL/make.inc.LINUX make.inc

Adjust make.inc as follows:

OPTS     = -funroll-all-loops -O3 -fPIC
LOADOPTS = -fPIC

The point of introducing the -fPIC flag is that allows shared libraries such
as those generated by FreeEOS to link directly to the lapack/blas static
libraries.  

Adjust Makefile to build the blas library
from scratch.  On Linux we do all tests to make sure all is well with the
result.

lib: blaslib lapacklib tmglib

Then I executed

make 

to build everything.  Look for any errors or warnings from the test results
(I did get warnings that some of the timings were zero, but I believe
that is a problem of timer resolution rather than something critical.)

Unfortunately the OPTS flag (see above) was not honored
in all cases by the lapack/blas Makefiles so I had to supplement the above
with

cd INSTALL/
g77  -funroll-all-loops -O3 -fPIC -c slamch.f -o slamch.o
g77  -funroll-all-loops -O3 -fPIC -c dlamch.f -o dlamch.o
cd ../SRC
g77  -funroll-all-loops -O3 -fPIC -c slaruv.f -o slaruv.o
g77  -funroll-all-loops -O3 -fPIC -c dlaruv.f -o dlaruv.o
cd ../TESTING/MATGEN/
g77  -funroll-all-loops -O3 -fPIC -c -c slaran.f
g77  -funroll-all-loops -O3 -fPIC -c -c dlaran.f
cd ../..
make

ls -l *.a
blas_LINUX.a    lapack_LINUX.a  tmglib_LINUX.a

I symlinked the more standard names to these libraries so that
my FreeEOS build procedure would recognize them.

ln -s blas_LINUX.a libblas.a
ln -s lapack_LINUX.a liblapack.a

I modified the permissions of the directory so that all system users could
read it.

chmod o+r .

***Debian testing with gfortran

Follow directions for Debian testing with g77 except for the following:

edit make.inc as follows:

FORTRAN  = gfortran
LOADER   = gfortran
TIMER    = INT_ETIME

Use gfortran rather than g77 in the supplemental builds, e.g.,

cd INSTALL/
gfortran  -funroll-all-loops -O3 -fPIC -c slamch.f -o slamch.o
gfortran  -funroll-all-loops -O3 -fPIC -c dlamch.f -o dlamch.o
cd ../SRC
gfortran  -funroll-all-loops -O3 -fPIC -c slaruv.f -o slaruv.o
gfortran  -funroll-all-loops -O3 -fPIC -c dlaruv.f -o dlaruv.o
cd ../TESTING/MATGEN/
gfortran  -funroll-all-loops -O3 -fPIC -c -c slaran.f
gfortran  -funroll-all-loops -O3 -fPIC -c -c dlaran.f
cd ../..
make

3. CMake Installation Prerequisite

  N.B. This installation prerequisite is new with FreeEOS-2.1.0 since for
  that version I changed from a autotools-based build system (e.g.,
  configure) to a CMake build system.
  
  The reason for this change is CMake is just easier for me. Ever since KDE
  adopted it for their builds all sorts of free software projects have
  adopted it.  PLplot was one such project, and through my development
  efforts for that project I learned to enjoy using CMake to make a build
  system that should provide good results on all Linux/Unix platforms and
  also on windows platforms with a minimal effort on the developer's part.
    
  To install CMake (N.B. minimum version 2.4.4) on your system follow the
  directions at http://cmake.org/HTML/Install.html

4. Build and Install FreeEOS

  * Unpack the free_eos-2.x.y.tar.gz tarball where x.y are currently 2.0.

  * Set an environment variable to help cmake find libraries that implement
    the BLAS and LAPACK API's.  For example, suppose you had libblas.a and
    liblapack.a installed in /home/myusername/mylibs Then set
    
    export CMAKE_LIBRARY_PATH=/home/myusername/mylibs
    
    Note, the above command is optional if the directory is a standard
    install location (e.g., /usr/lib).
    
  * Create an empty build directory.
  
    mkdir build_dir 	  #for example.
    
  * Prepare a FreeEOS build in that empty build tree.
  
    cd build_dir
    ls 			  #Make sure that directory is empty!
    # The following is an example of how to choose your fortran compiler
    # and compiler options.  Note this step must occur in an empty
    # build tree before the cmake commmand is executed.
    export FC='g77 -g'
    # $SOURCE_TREE is the directory corresponding to the top of the source
    # tree which you unpacked from the tarball, e.g., ../plplot-2.2.1
    # $PREFIX is your chosen free_eos installation prefix, e.g.
    # /usr/local/free_eos/2.2.1
    cmake -DCMAKE_INSTALL_PREFIX=$PREFIX \
    -DCMAKE_VERBOSE_MAKEFILE=ON $SOURCE_TREE >& cmake.out
    
    The above cmake command prepares the Makefiles in build_dir so that
    subsequent make steps will build and install FreeEOS.
    
  * Build Free_EOS and check results.
    make >& make.out
    less make.out
    
  * Install libfree_eos and fortran include files in the prefix area you
    designated in the cmake step.  Check results.
    make install >& make_install.out
    less make_install.out

    To link your own (stellar-interiors) code to FreeEOS on Linux using g77
    use options like the following:

    g77 mycode.f -I$PREFIX/include/free_eos -Wl,--rpath -Wl,$PREFIX/lib \
    -L$PREFIX/lib -lfree_eos -llapack -lblas

    The -I option is only required if you make use of some of the installed
    fortran include files associated with FreeEOS such as physical
    constants, etc.  The "-Wl,--rpath -Wl,$PREFIX/lib" options mean you
    don't have to fool around with LD_LIBRARY_PATH for non-standard
    prefixes.  

    N.B. Users of fortran compilers other than g77 (set the environment
    variable FC _before_ running cmake in an empty build directory [see
    above] if you want something other than the default choice for your
    system, and look at the above cmake.out and make.out to see which
    fortran compiler you got) will have to read their fortran user's manual
    to mimic the effect of the -I and -Wl, options. The -L and -l options
    should be the same for all fortran compilers.  Note, you will also need
    an additional -L option for the location of liblapack.a and libblas.a if
    they are not installed in a standard location.

  * Run the compiled test code, and check results against a standard run on
    my own machine.  This code runs a particularly difficult example of the
    EOS, and tests all derivatives by comparing with centred numerical
    differences for 8 step sizes which are reduced by an order of magnitude
    between results. See utils/README.free_eos_test for details about this
    test routine.  Although this is a particularly difficult example
    (corresponding to the physical conditions in the deep envelope of an
    extreme lower-main-sequence model), it takes only a total of 0.5 secs to
    execute this command on a linux/Athlon 600 MHz PC.  That time should be
    divided by 33 to arrive at the approximate cpu time required per EOS
    call on a 600MHz PC since free_eos_test has an original call to the EOS
    and 32 additional calls to the EOS to form the required centred
    numerical differences.  
    
    Note that on various platforms (Linux, AIX, Solaris, and Mac OS X 10.3
    or 10.4) typical differences between free_eos_test.out_local and
    free_eos_test.out_standard occur in the 12th to 16th figure (or 10^-12
    or smaller for logarithmic quantities) which is a very good numerical
    floating-point result (i.e., the calculation loses at most 4 significant
    digits from the original ~16 decimal digits we started with in this
    complicated double-precision calculation).  
    
    Note it is important to pay attention to the results of the following
    test.  I have had one case where FreeEOS built and free_eos_test ran
    without any obvious error messages.  But free_eos_test results were
    completely unreliable (presumably due to fortran compiler problems on the
    old, poorly maintained system where this problem occurred.)
    
    cd utils	#N.B utils in the build tree
    ./free_eos_test <free_eos_test.in >& free_eos_test.out_local
    less free_eos_test.out_local
    sdiff -w 156 free_eos_test.out_local free_eos_test.out_standard |less
    
    Also, you can test the bfgs routine in libfree_eos with the notoriously
    difficult to minimize rosenbrock function.
    
    ./test_rosenbrock > test_rosenbrock.out_local
    less test_rosenbrock.out_local
    sdiff -w 156 test_rosenbrock.out_local test_rosenbrock.out_standard |less

5. Instructions for all users of FreeEOS

N.B. I reserve the right to change the argument list of any routine in the
library without notice except for free_eos itself where the changes will be
minimal and well documented when they do occur.  Thus, free_eos is the
routine which should be called by all FreeEOS fortran users, and planned C
and python interfaces to the FreeEOS library will only contain the API of
free_eos and no other routine.
    
free_eos sets up flags (a very important step) and calls free_eos_detailed
which in turn calls the rest of the routines. src/README.developers is a
convenient summary of the relationships between the various routines. Many
flag combinations in free_eos.f have been tested by using them to produce
the figures in the papers collected at freeeos.sf.net/documentation.html.  A
direct call of free_eos_detailed.f is not recommended since arbitrary
combinations of flags (as opposed to the tested flag combinations in
free_eos.f) may not work.  All arguments for free_eos are documented in that
code.

The input arguments to free_eos are the 4 flags: ifoption, ifmodified,
ifion, and kif_in which control the option suite being used for the
free-energy model; eps and neps, the array of abundances and the size of
that array (must be 20); match_variable (= fl, ln p, or ln rho for kif = 0,
1, 2), and tl (= ln T). All other arguments to free_eos are output from that
routine.
    
ifion is a flag that controls the way that ionization is done.  In general,
the lower ifion, the slower the code, and the more ionization details that
are calculated.

ifion = -2 implies all 295 ionization stages of the 20 elements are treated
in detail.

ifion = -1 implies the 10 low-abundance minor metals are treated as fully
ionized while H, He, and the major metals (currently the list is C, N, O,
Ne, Mg, Si, S, and Fe which is controlled by the iftracemetal array in
free_eos_detailed) are treated in detail.

ifion = 0 is interpreted identically to ifion = -1 below T = 1.d6 while
above that temperature ifion = 0 is interpreted identically to ifion = 1
(see next).

ifion = 1 implies all major and minor metals are always treated as fully
ionized.

ifion = 2 implies all elements are treated as fully ionized.

The principal flag combinations are the following:

ifoption, ifmodified, ifion 

1,-1,1    (PTEH without radiation pressure (ifmodified = -1) and with

1,-101,1  radiation pressure (ifmodified = -101). I don't recommend PTEH
	  except for test calculations, but if you want to mimic the PTEH
	  code exactly you should calculate eps using integer atomic weights
	  before calling my EOS routine.)

2,-1,-1   (GEFF without radiation pressure (ifmodified = -1) and with

2,-101,-1 radiation pressure (ifmodified = -101).  I no longer recommend
          GEFF.)

2,-2,-1   (SIREFF without radiation pressure (ifmodified = -2) and with

2,-201,-1 radiation pressure (ifmodified = -201).  I no longer recommend
          SIREFF.)

3,0,-1    (MDH with modifications of the molecular treatment, see paper.)

3,1,-2    (EOS1, our recommended EOS that has been constrained by OPAL and SCVH
	  fits.  The ifion=-2 flag means that all 295 ionization states of
	  the 20 elements are treated in detail.)

3,1,-1    (EOS1a.  This is identical to EOS1 except that minor metals are
	  approximated as fully ionized (because of the different ifion
	  flag, see above) which increases the speed of the computation by
	  almost a factor of three at the expense of almost negligible
	  pressure errors at low temperatures.  N.B. for FreeEOS-1.3.0 and
	  below we used the EOS1 label for what is now called EOS1a.)

2,1,-1    (EOS2, a fit of EOS1 using modified GEFF pressure ionization.)

1,1,0     (EOS3, a fit of EOS1 using a modified PTEH pressure ionization with
	  the PTEH approximation used for the Coulomb sums above log T = 6.
	  Also, because of the ifion flag [see above], the major metals are
	  assumed fully ionized above log T = 6.) 

1,101,0   (EOS4, same as EOS3, except use the PTEH approximation for the
	  Coulomb sums for **all** temperatures.) EOS4 produces excellent
	  results even for the extreme LMS if *just* reliable radii and
	  luminosities are required from the interior model.  For more
	  detailed results such as vibrational frequencies EOS1 is
	  recommended.

The PTEH, GEFF, SIREFF, and MDH options are included to provide good
compatibility with those equations of state (see paper), and to provide
comparisons with the remaining versions of our EOS.

The EOS1, EOS1a, EOS2, and EOS3 option suites respectively take about 80,
30, 8, and 2 times as long to compute as EOS4 for the locus of points in a
solar model. They represent various compromises between speed and quality
(see paper).  For solar vibrational frequencies or generating EOS tables to
be subsequently interpolated I recommend using EOS1. For most stellar work
involving calculations of luminosities and effective temperatures, EOS4
provides excellent results when called directly from the stellar interiors'
code, but it might be worthwhile to try EOS1 or EOS1a for a few test cases
(especially along the LMS where differences are the maximum) to make sure
the changes are within the observational errors.  Also, note that
interpolating EOS tables is a non-trivial task since the tables have to be
quite large to reduce interpolation errors to negligible proportions.

Don VandenBerg has found that even EOS4 does very well for the extreme LMS.
The reason is that the large changes from EOS1 involve the temperature (for
rho, P as the independent variables).  These large changes do not occur for
the core (so the luminosity is unaffected) or the surface (so the P(rho)
adiabat for the efficient convection occurring for the entire star is
unaffected).  On the other hand, the PTEH EOS does have significant
temperature changes at the surface and in the core so the mass-luminosity
relation for the extreme LMS is affected by using this EOS.  I no longer
recommend using GEFF or SIREFF.  They do fairly well for solar conditions,
but the Debye-Huckel Coulomb theory upon which they are based has huge
errors for the LMS which lead, for example, to negative pressures.

6. Conclusions

The latest version of this README should always be available at
http://freeeos.sourceforge.net/documentation.html along with most other
sources of FreeEOS documentation including research note(s) about the
implementation.  As always, the best source of documentation is the code
itself (especially the introductory comments to free_eos contained in
src/free_eos.f). If in doubt, read the code and/or e-mail me your questions
on the freeeos-general list.  Note, to post to that list, you must subscribe
following the directions at
http://lists.sourceforge.net/lists/listinfo/freeeos-general

For detailed remarks on changes to the EOS code see the ChangeLog.prior_SF
and the ChangeLog files.

FreeEOS is free software; you can redistribute it and/or modify it under the
terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This software is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
(COPYING file in this directory) for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 675 Mass
Ave, Cambridge, MA 02139, USA.

Alan W. Irwin  (irwin@beluga.phys.uvic.ca) 2007-07-24
